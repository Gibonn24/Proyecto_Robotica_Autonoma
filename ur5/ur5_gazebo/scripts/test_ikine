#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from markers import *
from functions import *
import matplotlib.pyplot as plt
import signal
import sys

errors = []


def signal_handler(sig, frame):
    print('\nCtrl+C presionado. Ejecutando código de limpieza...')
    plt.plot(errors, 'r')
    plt.plot(errors, 'b.')
    plt.title('Evolución del error - Método de Newton\nIteraciones: ' +
              str(len(errors)))
    plt.grid()
    plt.xlabel('Número de iteraciones')
    plt.ylabel('Norma del error')
    plt.show()
    sys.exit(0)

if __name__ == '__main__':

    signal.signal(signal.SIGINT, signal_handler)

    rospy.init_node("testInvKine")
    pub = rospy.Publisher('joint_states', JointState, queue_size=1)

    bmarker      = BallMarker(color['RED'])
    bmarker_des  = BallMarker(color['GREEN'])

    # Joint names
    jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

    # Desired position
    xd = np.array([0.84, 0.125, 0.249])
    # Initial configuration
    q0 = np.array([0.0, -1.0, 1.7, -2.2, -1.6, 0.0])
    # Inverse kinematics
    q, errors = ikine_ur5(xd, q0)

    # Resulting position (end effector with respect to the base link)
    T = fkine_ur5(q)
    print('\n')
    print("Posición deseada: " + "X: " + str(xd[0]) + ", Y: " + str(xd[1]) + ", Z: " + str(xd[2]))
    print('Obtained value:\n', np.round(T,3))
    print('q:\n', np.round(q, 3))
    print("\n")

    # Red marker shows the achieved position
    bmarker.xyz(T[0:3,3])
    # Green marker shows the desired position
    bmarker_des.xyz(xd)

    # Objeto (mensaje) de tipo JointState
    jstate = JointState()
    # Asignar valores al mensaje
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q

    # Loop rate (in Hz)
    rate = rospy.Rate(100)
    
    # Continuous execution loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Publish the message
        pub.publish(jstate)
        bmarker.publish()
        bmarker_des.publish()
        # Wait for the next iteration
        rate.sleep()

#!/usr/bin/env python3

import rospy
import numpy as np
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from markers import *
from functions import *

def main():
    rospy.init_node("testKinematicControlPosition_gazebo")

    pub = rospy.Publisher('/trajectory_controller/command', JointTrajectory, queue_size=10)
    rospy.sleep(1)  # espera que se conecte el publisher

    bmarker_current = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])

    joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint',
                   'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

    # Punto objetivo
    q0_guess = np.array([0, -1.57, 0.75, 0, 0, 0])
    xd_raw = np.array([-0.3, 0.6, 0.1])
    q_goal, _ = ikine_ur5(xd_raw, q0_guess)
    T_goal = fkine_ur5(q_goal)
    G = T_goal[0:3, 3]
    G[2] += 0.59  


    k = 0.5
    xd = G  
    q = np.array([0.0, -1.0, 1.7, -2.2, -1.6, 0.0])  # posición inicial
    rate = rospy.Rate(50)
    dt = 1.0 / 50

    while not rospy.is_shutdown():
        T = fkine_ur5(q)
        x = T[0:3, 3]
        e = x - xd

        if np.linalg.norm(e) < 0.01:
            rospy.loginfo("Punto objetivo alcanzado.")
            break  

        de = -k * e
        J = jacobian_position(q)
        dq = np.linalg.pinv(J).dot(de)
        q = q + dq * dt


        traj = JointTrajectory()
        traj.joint_names = joint_names

        pt = JointTrajectoryPoint()
        pt.positions = q.tolist()
        pt.time_from_start = rospy.Duration(2)

        traj.points = [pt]
        traj.header.stamp = rospy.Time.now()
        pub.publish(traj)

        # Visualización en RViz
        bmarker_current.xyz(x)
        bmarker_desired.xyz(xd)

        rate.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass

